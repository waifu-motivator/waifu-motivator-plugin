plugins {
    id 'waifu-motivator-build-plugin'
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.18'
    id 'io.franzbecker.gradle-lombok' version '3.3.0'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id "org.jlleitschuh.gradle.ktlint" version "9.4.1"
    id 'org.kordamp.gradle.markdown' version '2.2.0'
}

group pluginGroup
version System.getenv().getOrDefault('VERSION', '').replace('refs/tags/v', '')

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'com.googlecode.soundlibs', name: 'mp3spi', version: '1.9.5.4'
    implementation 'commons-io:commons-io:2.6'
    implementation 'io.sentry:sentry:1.7.30'
    testCompile group: 'junit', name: 'junit',
        version: '4.12'
    testCompile "org.mockito:mockito-core:2.+"
    testImplementation "org.assertj:assertj-core:3.8.0"
    testImplementation "io.mockk:mockk:1.10.0"
}

configurations {
    // sentry brings in a slf4j that breaks when
    // with the platform slf4j
    implementation.exclude group: 'org.slf4j'
}

publishPlugin {
    token System.getenv().getOrDefault('PUBLISH_TOKEN', '')
    channels System.getenv().getOrDefault('PUBLISH_CHANNEL', '')
}


intellij {
    version ideaVersion
    type System.getenv().getOrDefault("INTELLIJ_TYPE", "IC")
    println "Building for IntelliJ version: ${version}"

    alternativeIdePath idePath

    if ("DOKI" == System.getenv("DEV_ENV")) {
        setPlugins(
            'io.acari.DDLCTheme:11.0.0'
        )
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

markdownToHtml {
    sourceDir file("${project.buildDir}/markdown")
    outputDir file("${project.buildDir}/html")
}

patchPluginXml {
    sinceBuild sinceBuildVersion
    untilBuild untilBuildVersion

    def description = "${project.buildDir}/html/plugin.html"
    if (file(description).exists()) {
        pluginDescription(file(description).text)
    }

    def changelog = "${project.buildDir}/html/RELEASE-NOTES.html"
    if (file(changelog).exists()) {
        changeNotes(file(changelog).text)
    }
}

tasks.markdownToHtml.dependsOn("createReleaseNotes")
tasks.markdownToHtml.dependsOn("copyPluginDescription")
tasks.htmlToMarkdownExtension.dependsOn("markdownToHtml")
tasks.patchPluginXml.dependsOn("htmlToMarkdownExtension")
