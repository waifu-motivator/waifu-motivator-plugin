import java.util.stream.Collectors

def properties(String key) {
    return project.findProperty(key).toString()
}

plugins {
    id 'waifu-motivator-build-plugin'
    id 'java'
    id 'org.jetbrains.intellij' version '1.0'
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
    id 'org.jlleitschuh.gradle.ktlint' version '10.1.0'
    id 'org.kordamp.gradle.markdown' version '2.2.0'
}

group pluginGroup
version pluginVersion

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile group: 'com.googlecode.soundlibs', name: 'mp3spi', version: '1.9.5.4'
    implementation 'commons-io:commons-io:2.10.0'
    implementation 'io.sentry:sentry:5.0.1'
    testCompile group: 'junit', name: 'junit',
        version: '4.12'
    testCompile "org.mockito:mockito-core:3.+"
    testImplementation "org.assertj:assertj-core:3.19.0"
    testImplementation "io.mockk:mockk:1.11.0"
}

configurations {
    // sentry brings in a slf4j that breaks when
    // with the platform slf4j
    implementation.exclude group: 'org.slf4j'
}


intellij {
    version.set(ideaVersion)
    type.set(System.getenv().getOrDefault("INTELLIJ_TYPE", "IC"))
    println "Building for IntelliJ version: ${version}"

    plugins.set(Collections.singletonList('io.unthrottled.amii:0.10.2'))
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

markdownToHtml {
    sourceDir file("${project.buildDir}/markdown")
    outputDir file("${project.buildDir}/html")
}

tasks.runPluginVerifier {
    ideVersions.set(
        pluginVerifierIdeVersions.split(',').stream()
            .map(String::trim)
            .filter(version -> !version.isEmpty())
            .collect(Collectors.toList())
    )
}

tasks.runIde {
    idePath = properties("idePath")
    if (!idePath.isEmpty()) {
        ideDir.set(file(idePath))
    }
}

tasks.publishPlugin {
    token.set(System.getenv().getOrDefault('PUBLISH_TOKEN', ''))
    channels.set(Collections.singletonList(System.getenv().getOrDefault('PUBLISH_CHANNEL', '')))
}

tasks.patchPluginXml {
    sinceBuild.set(sinceBuildVersion)
    untilBuild.set(untilBuildVersion)

    def description = "${project.buildDir}/html/plugin.html"
    if (file(description).exists()) {
        pluginDescription.set(file(description).text)
    }

    def changelog = "${project.buildDir}/html/RELEASE-NOTES.html"
    if (file(changelog).exists()) {
        changeNotes.set(file(changelog).text)
    }
}

tasks.markdownToHtml.dependsOn("createReleaseNotes")
tasks.markdownToHtml.dependsOn("copyPluginDescription")
tasks.htmlToMarkdownExtension.dependsOn("markdownToHtml")
tasks.patchPluginXml.dependsOn("htmlToMarkdownExtension")
