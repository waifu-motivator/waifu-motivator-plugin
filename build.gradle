import java.text.SimpleDateFormat
import java.util.stream.Collectors

def properties(String key) {
    return project.findProperty(key).toString()
}

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.9.22"
    id "org.jetbrains.intellij" version "1.16.1"
    id "org.jetbrains.changelog" version "2.2.0"
    id "org.jlleitschuh.gradle.ktlint" version "12.0.3"
    id "org.kordamp.gradle.markdown" version "2.2.0"
    id 'org.springframework.boot' version '3.2.1'
}

apply plugin: "org.jetbrains.changelog"

group pluginGroup

// Value will be set in pipeline
// if not pick it up from the properties.
def resolvedPluginVersion = System.getenv('VERSION') ?: getProperty("pluginVersion")
version resolvedPluginVersion

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation "commons-io:commons-io:2.15.1"
    implementation 'io.sentry:sentry:7.1.0'
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.jetbrains.kotlin:kotlin-test:1.9.22"
    testImplementation "org.mockito:mockito-core:5.8.0"
    testImplementation "org.assertj:assertj-core:3.24.2"
    testImplementation "io.mockk:mockk:1.13.8"
}

configurations {
    // sentry brings in a slf4j that breaks when
    // with the platform slf4j
    implementation.exclude group: "org.slf4j"
}

intellij {
    pluginName.set(properties("pluginName"))
    version.set(properties("platformVersion"))
    type.set(properties("platformType"))
    downloadSources.set(properties("platformDownloadSources").toBoolean())
    updateSinceUntilBuild.set(true)

    plugins.set(Collections.singletonList("io.unthrottled.amii:${amiiVersion}"))

    println "Building for IntelliJ version: ${version}"
}

// Configure gradle-changelog-plugin plugin.
// Read more: https://github.com/JetBrains/gradle-changelog-plugin
changelog {
    version = resolvedPluginVersion
    header = "[$resolvedPluginVersion] - ${new SimpleDateFormat("yyyy-MM-dd").format(new Date())}"
    groups = []
}

markdownToHtml {
    sourceDir file("${project.projectDir}/docs")
    outputDir file("${project.layout.buildDirectory}/html")
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

bootJar {
    enabled = false
}

tasks.runPluginVerifier {
    ideVersions.set(
        pluginVerifierIdeVersions.split(',').stream()
            .map(String::trim)
            .filter(version -> !version.isEmpty())
            .collect(Collectors.toList())
    )
}

tasks.runIde {
    idePath = properties("idePath")
    if (!idePath.isEmpty()) {
        ideDir.set(file(idePath))
    }
}

tasks.publishPlugin {
    token.set(System.getenv().getOrDefault("PUBLISH_TOKEN", ""))
    channels.set(Collections.singletonList(System.getenv().getOrDefault("PUBLISH_CHANNEL", "")))
}

tasks.patchPluginXml {
    sinceBuild.set(sinceBuildVersion)
    untilBuild.set(untilBuildVersion)

    changeNotes.set(changelog.getUnreleased().toHTML())

    def description = "${project.layout.buildDirectory}/html/plugin.html"
    if (file(description).exists()) {
        pluginDescription.set(file(description).text)
        println "Successfully patched plugin description."
    }
}

tasks.publishPlugin.dependsOn("patchChangelog")
tasks.patchPluginXml.dependsOn("markdownToHtml")
